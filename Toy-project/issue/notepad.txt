<TailwindCSS>
    매번 styled-component만 쓰다가 이번에 새롭게 TailwindCSS를 공부했으며 Issue toy-project에 처음으로 적용시켜봤다.
    아직은 늘 하던 방식이 아니라 공식 문서를 많이 참고하고 있어 속도가 매우느리지만,
    태그명(네이밍)을 고민하지 않아도 되는 점이 매우 편리하게 다가온다.



<Redux-tool-kit>
    수업시간에 배운게 전부였고 배운지 꽤 오랜시간이 지나 다소 생소하게 다가온다.
    combineReducers({...}) : reducer들을 한군데서 관리하는 곳
    configureStore({...}) : reducer에서 반환된 새로운 state를 Store라는 객체로 정리해 관리하는 곳
                            property명이 반드시 reducer: @@ 가 되어야한다.
    createSlice() : reducer 함수와 action creator를 포함한 객체
    createAsyncThunk() : 비동기 처리 해주는 역할. thunk action creator를 반환한다(fulfilled, pending, rejected)
                         const 이름 = createAsyncThunk('액션명 정의', async () => {비동기 호출 함수 정의});
    useSelector( state => state.rootReducer에 넣어둔 reducer에 선택적 접근 가능 )로 전역으로 관리중인 state에 접근할 수 있다
    useDispatch()를 써서 dispatch로 전달 가능
    


<Markdown>
    마크다운 언어 변환 라이브러리로 'react-markdown'을 설치하여 사용했다.
    하지만 해당 라이브러리로는 link, table, checklist 등의 형식 표현에 제한적이기 때문에
    추가적으로 remarkPlugins에 'remarkGfm'도 추가하였다.

    특히 이번 프로젝트 github issue의 body에 마크다운 언어로 데이터를 받아와서 번역해주는 라이브러리가 큰 도움이 되었다.
    하지만 미들웨어 포함하여 차근차근 다시 익혀나가는 중이다.



<React>
    새롭게 알게 된 점: onClick같은 이벤트들은 기본적으로 리액트가 일반적인 JSX DOM에서는 사용하도록 만들어뒀지만
                      직접 만든 컴포넌트에 이벤트를 걸 땐 props로 전달후 컴포넌트에서 처리해줘야 작동한다.