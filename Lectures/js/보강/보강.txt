
1. this
    동적으로 바인딩(결정)된다.
    누가 this를 호출하였는지에 따라 결정된다.

    중요한 것은 자바스크립트에서 this는 누가 호출하느냐에 따라 달라질 수 있다는 것
    이벤트가 발생한 대상, new 객체로 생성된 인스턴스, 객체, 메서드, 클래스 등에 활용

------------------------------------------------------------------------------

2. 가비지 컬렉터
    Java, Javascript에 내장된 일종의 알고리즘
    유효하지 않은 메모리를 자동으로 제거해주는 작업
    도달 가능성 여붕레 따라 메모리 관리를 수행.

    가비지 컬렉터는 모든 객체를 모니터링하고 잇다가 도달할 수 없는 객체를 삭제하는
    mark - and - sweep이라는 가비지 컬렉션 알고리즘을 사용하고 있다

    root(최상위)에서부터 도달할 수 있는 모든 객체에 mark표시
    한번 mark가 된 객체에는 다시 접근하지 않고 mark하지 않은 객체는 삭제하는 알고리즘

    위 과정을 계속 반복
    만약, 가비지 컬렉터가 없다면 직접 메모리에 낭비되고 있는 변수 혹은 값을 찾아서
    직접 해당 변수들을 제거(해체)해줘야함

    장점 : 편리하다
    단점 : 무겁다. 코드 실행하는 속도 느려진다.

    다만 모든 메모리 누수를 관리하는 것은 아니므로 메모리 누수에 대한 경계를 늦춰서는 안된다.

------------------------------------------------------------------------------

3. 메모리 누수 (Memory Leak)
    메모리와 힙에 할당된 부분이 참조되어 있지만 다른 변수나 함수가 가져다가 쓰고 있지도 않은데 
    해당 영역을 점유하고 있는 현상

------------------------------------------------------------------------------

4. 스택과 큐
    스택
        쌓는다 / LIFO(Last In First Out, 후입선출)
        마지막에 들어온 것부터 스택 자료구조에서 제거 (자바스크립트, 콜스택(자바스크립트 실행컨텍스트에 의해 실제 함수가 실행))
        후입선출의 구조를 띄고 있는 자바스크립트의 저장소(자료구조)

    큐
        줄서기 / FIFO(First In First Out, 선입선출)
        가장 먼저 들어온(가장 오래된) 것 부터 큐 자료구조에서 제거(자바스크립트, 이벤트 루프 테스크 큐(비동기))

------------------------------------------------------------------------------

* 5. 자바스크립트 실행 컨텍스트 (자바스크립트의 실행 환경)

    1. Global Execution Context (전역 실행 컨텍스트(=환경, 원리))
        자바스크립트가 실행되면서 가장 먼저 실행되는 컨텍스트

    2. Function Execution Context (함수 실행 컨텍스트)
        각각의 함수가 실행될 때마다 생성되는 컨텍스트

    3. 이 외에도 Evel, Module이 존재하지만 가장 큰 개념인 1,2만 알아도 충분

    - 기본적인 과정
        1. 전역 코드 평가 (함수/변수 등을 평가(저장) 및 실행)
        2. 함수 코드 평가 (함수가 실행되었을 때 함수 내부에 있는 매개변수와 지역변수를 저장하고 실행)

    ## 평가
        실행 컨텍스트를 생성하고, 변수 함수 등의 선언문을 파악하여 
        현재 구역(스코프)에서 사용할 수 있는 식별자들을 실행컨텍스트에 저장(등록)하는 과정

        여기서 호이스팅의 개념이 나온다. 실제 자바스크립트에서는 호이스팅이라는 말은 없음.
        그러나 마치 식별자가 평가 과정에 의해 먼저 선언부를 읽고 실행 컨텍스트에 저장되면서 
        값이 할당되지 않았는데도 읽혀지는 현상을 호이스팅이라고 부르기 시작함

        => 이미 변수 선언부가 등록되어 있기 때문에 실행 과정에서 값이 할당되지 않아도 undefined이 찍혔던 현상

        * 자바스크립트는 이러한 현상을 let과 const를 declarative environment record(정의 되어 있어야만 사용 가능한 저장소)에 따로 등록시켜
        값이 할당되지 않았다면 실행과정에서 참조 에러가 나도록 따로 관리하면서 호이스팅을 해결한 것 

    ## 실행(execute)
        실행이란 선언문들은 평가과정에서 저장되었기 때문에 선언문들은 제외하고
        나머지 실행 가능한 소스코드를 실행하는 과정을 의미

        이 과정에서 실행에 필요한 변수들을 해당 스코프에 이미 등록된 변수나 함수 값을 찾아서 참조하여 실행
        이 과정에서 값이 바뀌는 변수들은 다시 저장된 변수의 값들과 수정하여 등록


    - 전역실행컨텍스트

        자바스크립트가 실행되면서 가장 먼저 생성되는 컨텍스트. 여기에는 자바스크립트에 기본적으로 포함된 빌트인 객체를 포함한다(console.log, Math ...)

        (1) 전역 실행 객체 생성 (빌트인)
        (2) 참조하고 있는 전역 컨텍스트 ( 전역 변수, 즉시실행함수, 전역 함수 )
        (3) 평가 - 실행
            (let, const 등록, var, 함수 등록 )

            Lexical environment에 모두 저장되지만 자세히는
                일반 변수들은 declarative environment record,
                일반 함수(객체)들은 object environment record

            => 해당 값이 전역 스코프에 등록되어 어떠한 곳에서든 참조할 수 있도록

    - 함수실행컨텍스트
        
        (1) 함수 실행 컨텍스트 생성 (매개변수, 지역변수 등을 등록)
        (2) Lexical environment에 등록
        (3) 실행

------------------------------------------------------------------------------

6. 이벤트 루프
    자바스크립트는 싱글 스레드 기반
    한번에 한가지 일 밖에 못한다

    그런데 네트워크 요청과 같은 비동기 함수가 동기적으로 이루어져야하는 함수가 있다면( 비동기 요청이 끝나고 다음 것을 실행해야한다면)
    어떤 일이 벌어질까?

    하나의 비동기를 실행하기 위하여 5초의 시간이 걸림
    그러면 해당 5초가 지날 때까지 그 어떤 함수도 실행하지 않는단 이야기

    비동기를 동기적으로 처리하되 동기적으로 처리해야하는 부분을 콜백함수로 만들어서 이벤트 루프에 던져버리자
    그러고 나머지는 그대로 실행시키자는 이야기

    이벤트 루프를 통하여 비동기를 동기적으로 실행시키는 과정을 콜스택이 비어지면
    비동기를 실행하여 결과값을 가지고 있다가 해당 부분을 다시 콜스택으로 던지는 것을 말한다.


    자바스크립트 엔진의 메모리
        1. 힙 Heap: 크기가 동적으로 변하는 값들의 참조값(객체)
        2. 콜스택 Call Stack: 함수 실행시의 실행 컨텍스트가 쌓임(원시값 저장소)

    Wep api
        - 웹 브라우저에 구현된 api
        - DOM event, 네트워크 요청, timer 등이 해당  api 안에서 실행

    이벤트 루프
        - 비동기를 동기적으로 처리해야할 콜백함수는 이벤트 루프에 빠진다
        - 콜스택이 비어있다면, 태스크 큐에 있는 콜백함수를 처리한다

    테스크 큐
        - 이벤트 루프에 던져진 콜백함수들이 대기하는 장소
        - 큐 형태의 배열이고 이벤트 루프는 콜스택이 비워질 때마다 가장 오래된 큐부터 수ㅡㄴ서대로 큐에서 꺼내와 콜백함수로 던져 실행해야한다면
          하지만 태스크큐에도 내부적으로 또다른 큐로 순서가 나뉘기만 이 큐에도 우선 순위가 있다
        
        macro tasks: timer(setTimeout, setInterval), requestAnimationFrame, UI rendering
        micro tasks: promise, process.nextTick(일반 promise보다 우선순위가 조금 높은 것)

        macro tasks는 일반 테스크라고 불리며 micro tasks가 macro tasks보다 우선 순위가 높다
        micro tasks > macro tasks

------------------------------------------------------------------------------

7. 클로저


------------------------------------------------------------------------------
* 비동기 관련 자주 나오는 면접 질문
    1) 이벤트 루프를 설명해보세요
        '콜스택이 비어있어야만'이라는 말 꼭 해라
    2) callback 패턴이란 무엇인가 문제점은 뭘까요?
    3) promise 무엇인가요?
    4) promise.all, allSettled, race는 각각 언제쓰일까요?
        순서가 보장되지 않아있는 네트워크 요청에 대해서는 promiseAll을 사용해야 더 효율적이다
    5) async await 과 promise의 차이점은?