

쿠키와 세션
	쿠키 : 브라우저에 저장되는 key-value로 이루어진 작은 데이터 파일
		   서버와의 데이터 교환이 가능

		ex) refresh-token
			session-id

  	  => 브라우저가 닫히면 삭제됨. 하지만 유효기간을 명시하면 브라우저가 닫혀도 삭제되지 않는다.

		ex) 자동로그인, 팝업창 3일동안 보지않기

	세션 :  세션은 쿠키를 기반으로 됨. 
		    하지만 브라우저에 저장하는 쿠키와 달리 세션은 서버측에서 사용자 구분을 위해 사용자의 데이터를 서버에 저장

	  => 서버에 부담. 사용자에게 세션의 고유한 id값이 담긴 쿠키 전달.
	     해당 쿠키를 주고받으면서 이 사용자가 누구인지 확인할 수 있는 로그인 방식


인증토큰
	백엔드에서 user임을 증명할 수 있는 키 값(idx, token)을 백엔드 개발자가 설정한 암호화 방식과 
	암호화 키로 암호화하여 로그인시 프론트엔드 개발자에게 전달

	프론트엔드 개발자 -> 요청 때마다 header에 token을 실어서 백엔드에게 전달
	백엔드 개발자 -> 미들웨어를 생성하여 access 토큰이 백엔드에서 설정한 키값과 일치하는지 복호화
				 -> DB에 해당 user가 있는지 확인 후 데이터를 받아와서 다음 요청에 전달

	  * 암호화 방식 / 암호화 키
	    => jwt(json web token)만 있으면 어떠한 곳에서도 해독이 가능 (json데이터를 암호화할 수 있는 장점)


API test
	tool "Thunder"설치 (vsCode Extension)


-----------------------------------------------------------------------------------

ORM (Object Relational Mapping) : 객체와 관계형 DB연결
	sequelize 배우는거
	typeorm 제일 많이씀
	prismaorm 요즘 핫한

	npm i mysql2 sequelize sequelize-cli
	npx sequelize init

	생성된 파일 설명
		config : DB 연결 설정
		models : 테이블 및 스키마를 정의
		migrations :  테이블 및 데이터의 수정, 데이터를 추가, 이동
		seeders : 백업본

passport
	로그인, 회원가입, jwt인증, 세션관리(로그인과 인증 관련 로직)
	손쉽게 구현할 수 있도록 해줌

   * Oauth(SNS 로그인) 관련 백엔드 로직 구현을 좀 더 쉽게 해준다
   nextAuth, gotrue

   => 로그인 및 유저 세션 관리, 토큰 인증을 간편하게 구현할 수 있는 라이브러리


	npm i passport passport-local jsonwebtoken passport-jwt bcrypt


-----------------------------------------------------------------------------------

회원가입/로그인 로직 구현

-----------------------------------------------------------------------------------
