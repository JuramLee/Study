
 * 부록

    SASS (ex .scss)

        css의 상위 문법, 반복문, 제어문 변수 등을 활용한 편의성 제공
        참고: https://heropy.blog/2018/01/31/sass/

    
    ReactJS, AngularJS, VueJS
    ( ... js )

    1. stlyed-components (일부 SASS 문법을 기용)
    2. emotion (stlyed-components 사용법이 매우 유사) --- [css - in - js]
    3. scss
    4. css

---------------------------------------------------------------------------------

  * (1) tailwind CSS

    장점: 생산성이 높다
    단점: 유지보수, 가독성, 커스텀 쉽지 않음 === 직접 만드는게 생산성이 더 높다

    => 백엔드 개발자가 레이아웃 만들 때 사용, 관리자 페이지

    https://tailwindcss.com/

    (2) Bootstrap

    트위터 기반, 생산선을 높이기 위해 만듬

    https://getbootstrap.com/

    (3) antDesign

    https://ant.design/

 * (4) material UI (MUI)

    https://mui.com/
        
---------------------------------------------------------------------------------

  git이란?

    git은 소스 코드 버전 관리 시스템


  버전 관리 시스템 종류
    
    1. 클라이언트- 서버모델
        하나의 중앙 서버에서 여러 개발자(클라이언트)들이 각자 필요한 데이터만 가져와 작업하고
        다시 중앙으로 통합


    2. 분산모델
        하나의 중앙서버가 존재는 하지만 여러 개발자들은 각자의 저장소에 사본을 가지고와서 작업
        하는 방식

        ex) git

    git의 장점
        협업하는 개발자들끼리 소스코드를 직접 주고 받을 필요가 없음
        같은 파일을 여러명이 동시에 병렬 개발이 가능
        변동 과정(히스토리)을 체계적으로 관리할 수 있음
        중앙 서버 데이터가 유실되어도 쉽게 복구 가능 (여러 개발자들이 사본)


    github, gitlab
        git의 인터페이스 제공, 다양한 편의성 제공

        github
            https://github.com/

            개발자들의 협력을 중점, 이슈 트래커 제공
            유료 계정이 아닌 경우는 모든 코드를 오픈 소스로 공개
            업계 1위, 전세계적으로 약 4000만명 이상의 개발자
            단순, 소스 코드 버전관리 뿐만 아니라 개발자들의 커뮤니티로서 최고 수준
            이미 다른 개발자들의 코드를 직접 눈으로 보고 실행 및 참고 가능

        gitlab
            github와 항상 대립되는 클라우드(저장소)
            비공개 버전의 github, 무료로 비공개, 용량이 굉장히 넉넉한 편
            자체 호스팅(배포) 지원, 개발자들을 위한 도구들이 모두 설치
            그러나 이러한 도구들은 유료 계정으로 전환해야 사용 가능

        github vs gitlab
            보통 개발자라면 github
            회사 단위라면 gitlab, github를 사용

            ex) 외에도 Bigbucket이 있으나 가격 정책이 조금 높은 편, 회사에서 기용

-----------------------------------------------------------------------------------------------

    CI/CD란?
        - 지속적인 통합(Continuos Intergration)
        - 지속적인 배포(Continuos Deployment)

        프로젝트를 생성 -> 도메인, https -> 통합(명령어) -> 빌드 및 테스트(명령어)
        -> 배포(명렁어) -> 서버를 재가동(명령어)


        명령어들을 자동화 시키는 것이 바로 CI/CD

        만약 CI/CD를 하지 않는다면
        프로젝트의 수정사항이 생길 때 마다
        통합 명령어 -> 빌드 명령어 -> 테스트 명령어 -> 배포 명령어 -> 서버 재가동 명령어

        이런 명령어를 프로젝트 수정사항을 저장소에 push(저장)할 때마다 자동으로 실행시켜주면
        생산성이 높아질 것

        대표적으로 github action(플랫폼), jenkins(설치형 프로그램) 존재
        이러한 CI/CD의 자동 배포 논리는 Devops 방식을 극한으로 끌어오리는 것

        => 수정 사항을 적용하려면 많은 명령어를 사용 => 한번에 자동으로

    DevOps란?
        
        운영(서버)과 개발을 하나로 합친 것
        개발자들에게 너 운영 해라고 하면 싫어함, 그렇다고 비개발자 운영팀? (의사소통X)
        이런 개발과 운영을 하나로 함으로서 개발자들에게 회유
        CI/CD 자동화 파이프라인 생성, 작업 능률과 속도를 혁신적으로 상승

----------------------------------------------------------------------------------------------

    git 설치, 운영

        git 설치

        1. 구글에 Git 설치 검색 (첫번째)
        2. https://git-scm.com/downloads  -> 무지성 next
        3. github 꼭 가입! (git --version)

            ex) 
            (1) gitbash -> git 전용 터미널 -> git 속도가 빨라진다
            (2) gitDesktop -> UI 제공

        4. 터미널에 github 인증정보 등록
            git config --global user.email "깃허브 이메일주소"
            git config --global user.name "깃허브 네임"

        등록 되었는지 잘되었는지 확인 git config --list

        5. powershell에서 git명령어 인식x

            powershell을 관리자권한 실행
                Get-ExecutionPolicy
                Set-ExecutionPolicy -ExecutionPolicy RemoteSigned 
                => Y + Enter

 ----------------------------------------------------------------------------- "기본 설정 끝"

    git 명령어

        저장소 종류
        - 로컬 저장소 : 개인 (local)
        - 원격 저장소 : 공유 (remote)


        이닛 - init
            ex) git init
        
         내가 원격 저장소와 연결하고 싶은 프로젝트 폴더에서 실행
         해당 폴더에 로컬 저장소인 .git 폴더를 만드는 역할


        스테이징 - add
            ex) git add index.html / git add .
            
            작업 내용을 커밋하기 전에 파일 상태를 기록하는 임시 저장 공간
            커밋하기 전에 커밋 될 파일은 반드시 스테이징 상태여야 함

        커밋 - commit
            ex) git commit -m "커밋헤더(제목)" -m "커밋바디(내용)" -m "커밋푸터(참조)"

            버전을 만들 때 사용(저장)
            예를 들면 index.html / login.html을 하나로 묶어 하나의 버전으로 생성
            커밋 시 고유 아이디 7가지가 부여, 이 ID를 통해 원하는 버전으로 돌아갈 수 있음


        푸쉬/풀 - push/pull

            ex) git push 원격저장소명 브랜치명
                git pull 원격저장소명 브랜치명
            
            push
                내 로컬 환경에 커밋 된 파일을 github와 같은 원격 저장소에 등록

            pull
                원격 저장소에 저장된 파일들은 내 로컬 환경 받아온다

        
        클론/리모트 - clone/remote
            ex)
                git clone [원격저장소 주소] // 복사본
                git remote add [원격저장소명] [원격저장소 주소] // 원격저장소 연결

            clone
                원격 저장소에 있는 파일을 내 로컬 저장소[vscode - 프로젝트 폴더]로 복사하는 것
                (원격저장소 연결 자동)

            remote
                원격 저장소와 내 로컬 저장소를 연결하는 것

        브랜치 - branch

            ex) git branch 브랜치명 [브랜치 생성]
                git checkout 브랜치명 [브랜치 이동]
                git checkout -b 브랜치명 [브랜치 생성하고 이동]

                git checkout -b main
                git push origin main

            나뭇가지, 나무에서 여러갈래로 뻗은 줄기
            하나의 메인 나무 줄기
            그리고 branch라고하는 가지들을 생성해서 특정 기능을 개발하거나 버그를 수정할 때
            또 하나의 길을 만들어낸다

            단, 해당 기능이 완벽히 적용 됬다면 branch는 삭제

    ------------------------------------------------------------------------------------------

    다음주  
     과제풀이 / PR / MERGE / 소스트리 / 슬랙[메신저],노션[블로그],지라[블로그]
     배포, 호스팅 관련 / javascript

    ------------------------------------------------------------------------------------------

    5조 
        코어 (자율) 주말 19시~21시 [코드리뷰, 회의, 정보 공유] 4명
        모가코 (자율) 평일 21시~23시 [각자 공부, 코드, 질의응답] 4명

    1조
        코어 수,일 22시~24시 4~5명
        모가코 나머지 22시~24시 2명

    4조
        코어 주말 12시 ~ 14시 5명
        모가코 평일 20시 ~ 23시 3명

------------------------------------------------------------------------------------------

    자바스크립트 -> 두달차 (javascrip dom api, 기초)
    자바스크립트 -> 세달차 ~ 2주 (심화, 실행컨텍스트, 비동기), 알고리즘[코테대비, 코테문제풀이]
    리엑트 -> 세달차 ~ 4주

------------------------------------------------------------------------------------------

 cd 터미널로 경로 맞추고
 .git(내 로컬 자장소) // git init
 내 로컬 저장소 -> 깃허브 레퍼지토리 // git remote add 원격저장소명 레퍼지토리 주소
 .git과 같은 경로의 파일들을 내 로컬 저장소에 저장 -> 원격 저장소에 보낼 수 있음

 git add . // 스테이징 나는 이제 준비가되었다.
 git commit -m '커밋헤더' -m '커밋바디' -m '커밋푸터' // 내 로컬 저장소에 버전이 만들어지는 (저장)

 내 로컬 저장소 -> 원격 저장소 // git push 원격저장소명 저장될 원격 저장소의 브랜치명
                              // git push cafe24 main


 초기파일 생성 -> 원격 저장소 연결 -> 스테이징 -> 커밋(로컬 저장소 저장) -> 원격 저장소에 저장
 // 초기파일이 올라갔음 -> 레퍼티지토리 팀원초대(메일 전송) -> git clone 레퍼지토리 주소

 // main 브랜치에 바로 올리면 안된다.
 // 새로운 브랜치를 만들고 해당 브린치에서 PR(PULL REQUEST) --> 승인 -> main

  git brnach 브랜치명 => 생성
  git checkout 브랜치명 => 이동

  git checkout -b 브랜치명 => 생성 후 이동 (최초)
  git checkout 브랜치명 => 이동 (평소)


내가 올렸을 때

1. 초기 파일생성 (최초) git init
2. 원격 저장소연결 (최초) git remote add 원격저장소명 원격저장소URL
3. 초기 파일 스테이징 (최초) git add .
4. 초기 파일 커밋 (최초) git commit -m '제목' -m '본문'
5. 초기 파일 푸쉬 (최초) git push origin main // git pull orogin main // 
                        git pull origin main --rebase // git push origin main
--------------------------- 최초 파일 깃허브 레퍼지토리 o
if(팀원이 있다면){
    깃허브 레퍼지토리 - setting - 콜라보레이션 초대(메일 전송) - 승인
    팀원 입장 -> git clone 레퍼지토리 주소
}
6. 브랜치 생성 및 이동 git checkout -b style/index
7. 코드 수정 ...
8. 원격 저장소의 새로운 브랜치에 스테이징 - 커밋 - 푸쉬

git add .
git commit -m 'style: ✨홈페이지 레이아웃' -m '홈페이지의 레이아웃을 수정하였습니다.'
git push 원격저장소명 main

9. PR - 승인 - 브랜치 삭제

------------------------------------------------------------------------------------------
























