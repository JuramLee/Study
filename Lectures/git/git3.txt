 github fork
    
    보통 협업을 할 때는 Organization 만듬 협업자로 초대
    fork를 통해 내 레퍼지토리로 해당 프로젝트를 가지고 올 수 있음
    (보통은 오픈 소스, 간직하고 싶은 레퍼지토리 저장용)
    fork도 PR를 날릴 수 있음

    => 다른 사람의 원격 저장소에 올라온 프로젝트를 내 레퍼지토리에 가져올 때 사용


   
   1.
   메인 브랜치에 직접 add -> commit -> (pull) -> push (---o 구글, 능숙)

   2.
   브랜치를 만들어서 add -> commit -> push -> pr -> merge (---o 대중화)
    
     성용 index.html을 수정 -> add -> commit -> push -> pr -> 승인 -> main branch merge
     승빈 hello.html을 수정 -> add -> commit -> push -> pr 
                       - > conflict가 나는 바람에 pr에서 수정 -> 승인 -> main brnach merge

     태기 브랜치 생성 fix/index -> index.html을 수정 -> pr -> 승인 (1) -> merge
     선영 브랜치 생성 feat/login -> login.html을 생성 -> pr -> 승인 (2) -> merge
     효진 브랜치 생성 style/login -> login css를 수정 -> pr -> conflict (해결) -> 승인 -> merge 
     상현 브랜치 생성 style/index -> index css를 수정 -> pr -> 승인(3) -> merge


     협업을 위하여 pr에 제대로 된 설명을 할 필요가 있는 겁니다.
     처음에는 쉽지 않을 것 코드만 봐서 이게 어떤 기능인지 알 수 없음 => 많은 연습

     git error에 엄청 많이 날 것
     그러나 대부분은 콘솔에 해결법을 제시, 구글링에 해당 에러 검색하면 해결법 존재
     개발자 === 에러 해결하는 사람 == 많은 에러를 해결해 볼 필요가 있다

     pr -> 승인 ( 잘하시는 분 )

     ps. 자주 사용하지는 않기를 바랍니다.
        * 백업 방법
            git log
            git checkout [커밋아이디]
            ex) git checkout cb19fbeed867e3526b5c98d2fa440089495fe822

        * 최근 버전으로 돌아가기
            git checkout -

        * HEAD
            브랜치 혹은 현재 커밋의 위치를 가르키는 포인터


 ----------------------------------------------------------------------------------------------

 * git을 보다 쉽게 사용해줄수 있게 하는 도구
   그러나 의존해서는 안된다.
  
    소스트리
        GitHub, GitLab, BitBucket
        BitBucket 운영하는 회사가 만듬
        Git의 GUI를 제공 
        GUI?
            사용자가 편리하게 사용할 수 있도록 입출력 등의 기능을 알기 쉬운 아이콘과 같은 그래픽으로
            나타낸 인터페이스
        
        회원가입 해야함, 쓰면 편하기하나 사실 상 사용하는 이유 없음
        만약 우리 회사가 BitBucket 사용하다면 고려

    * 깃허브 데스크탑
        만약 내가 깃허브를 사용하고 있다면 단순히 로그인하는 것만으로
        내 레퍼지토리를 모두 가져올 수 있음
        뛰어난 GUI를 자랑, 현재는 소스트리보다 깃허브 데스크탑

    git-bash
        깃 허브 전용 쉘(콘솔창, 터미널)
        쉘이란 키보드로 입력한 명령어를 OS에 전달하여, 이를 실행하게 하는 프로그램

        속도 개선, 리눅스 명령어 사용 가능 ex) ls, history, mkdir


     => 유명해지는데는 이유가 있음 => 여러분들이 쓰는 것보다 편하고 쉬워서