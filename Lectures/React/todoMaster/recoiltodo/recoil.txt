Recoil

	Redux --> react에서 만든 상태 관리 라이브로리가 아님

	Recoil은 2020년 5월 facebook에서 정식으로 출시한 react hooks를 기반으로 제작된 상태 관리 라이브러리

	redux 역시 facebook에서 고안한 flux패턴을 기반으로 설계되었기 때문에 안정적으로 훌륭한 전역 상태 관리 라이브러리였지만

	문재점
		1. React 전용 라이브러리 X
		2. 복잡한 보일러 플레이트(초기세팅)
		3. 비동기 데이터에 대해서 추가 미들웨어 설치

	* atom = 상태 관리 최소 단위

	recoil은 사용하고자 하는 atom을 컴포넌트들이 구독하면서 상태 관리가 가능

	ex)
		const [state, setState] = useRecoilState(atom명)	// 상태, 변경함수
		const state = useRecoilValue(atom명)				// 상태
		const setState = useRecoilState(atom명)				// 변경함수
		useResetRecoilState(atom명)							// 초기화

* selector
	다른 atom 혹은 selector의 상태를 입력받아 파생된 데이터를 반환하는 순수 함수
		atom = {
			name: '이주람',
			age: 20,
			height: 190
		}
	비동기 처리를 selector로 진행하는 경우가 많았지만 현재는 잘 사용안함.
	현재는 비동기 관련 전역 상태관리를 모두 react-query에서 대신하고 있기 때문에 자주 사용하지는 않는 기능

		const postListSelector = selector({
			key: 'postList'
			get: async (get => {
				const id = get(focusAtom).id
				// 특정 atom의 데이터를 불러옴
				const allPosts = get(postListAtom);
				// 특정 atom의 데이터를 불러옴

				const post = allPosts.find((item) => item.id === id);
				// 이 두가지의 atom을 이용해서 파생된 데이터를 반환

				return post
			})
		})

		=> 두가지 데이터를 이용해서 새로운 데이터를 만든다

* 설치법
	npm i recoil

---------------------------------------------------------------------------------------------------------------------

*********짱중요*******

React-query
	서버 데이터의 전역 상태 관리
	* 서버의 데이터 요청을 캐싱하여 지속적으로 동기화하고 업데이트하는 작업을 도와주는 라이브러리

	staleTime (신선하지 않은 시간) = 유효기간 = 최신화가 필요하다
	데이터가 불러온 순간부터 시간이 가기 시작함
	 ㄴ stale 상태가 되면 refetch 시도

	cacheTime (저장하고 있는 시간)
	서버의 데이터가 cacheTime이 활성화된 동안에만 데이터를 유지
	cacheTime이 지나면 가비지 컬렉터에 수집.
	 ㄴ 데이터 활용시 시간이 가기 시작함

	refetch
	retry
	useQueryClient(데이터 변환, 키값을 통해 원하는 쿼리를 유효하지 않은 상태로 설정 가능(invalid상태))

	비슷한 라이브러리
		SWR (react-query랑 사용법 똑같음)
		Apollo --- graphQL에서만 사용 가능

	ex)
		const { data } = useQuery(['getTodo'], () => axios...)

* 설치법
	npm i @tanstack/react-query @tanstack/react-query-devtools
	