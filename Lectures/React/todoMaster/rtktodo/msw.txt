
MSW (Mocking Service Worker) : 가상 서비스 worker
	ㄴ 웹페이지와 브라우저 사이에서 일하는 일꾼
		- 오프라인 캐싱, 푸시 알림, 동기화 등등을 담당
	ㄴ MSW는 가상으로 실제 서비스 워커 대신 사용가능하게 한다

MSW를 활용하요 Mocking API 만들기
	ㄴ 백엔드가 없어도 프론트 내에서 API(http 요청)를 통한 데이터 교환을 할 수 있음
		1) 개발 초기 단계에서 백엔드 없이 빠르게 프로토 타입 제작이 가능
		   즉, 백엔드 없이 실제 백엔드에서 받는 것과 유사한 mock data를 생성하여 마치 실제 백엔드가 존재하는 것 처럼 프론트엔드 구상 가능

		   * 프론트엔드 개발자가 갖추어야할 것
		   	 내가 구상하려는 화면에서 백엔드에서 받아와야 하는 데이터가 무엇인지 알고 있어야함
			 그리고 이를 json 데이터로 만들 줄 알아야함

		2) MockApi 테스트, 프론트엔드 -> 테스트 코드 작성 -> 실제 API
			API 서버가 다운되어도 Mock API를 사용하여 개발 가능

		3) API 응답 속도가 느릴 경우 대체 가능, 개발자가 더 빠르게 개발 및 테스트 수행이 가능

		4) 다양한 시뮬레이션이 가능

Mocking Api를 활용하여 개발 및 테스트의 효율성을 높이고 코드의 안정성과 견고성을 높일 수 있음

------------------------------------------------------------------------------------------------------------------------------------

redux-middleware

	redux는 동기적인 작업을 처리하는 것
	그러나 실제 개발을 할 때는 비동기적인 데이터를 다룰 일이 더 많다.

	따라서 dispatch가 특정한 값을 전달하면 middleware에서 비동기 작업 처리 후
	결과 값을 store에 전달

	const res = await TodoService.getTodo()				|		dispatch({
	dispatch({											|			type: "GET_TODO"
		type: "GET_TODO",								|		})
		payload: res.data.data							|
	})													|

	
	redux-saga / redux-thunk
	그러나 Redux-Tool-Kit(RTK)에서는 thunk를 기본으로 하고 있으며
	기존 thunk보다 훨씬 더 간편하게 코드 구현이 가능하기에 saga의 사용 빈도가 급격히 줄어들고 있음

------------------------------------------------------------------------------------------------------------------------------------

npm i msw immer redux-saga
* immer는 state의 불변성을 쉽게 관리해주기 위해 사용하는 라이브러리
 	-> 즉, 불변성 지키지 않아도 알아서 불변성 지켜주는 기능

------------------------------------------------------------------------------------------------------------------------------------
	
env파일 달라 -- 로컬에 개발 가능? (환경변수 설정 달라)
prettier, eslint가 적용이 안된다 -> setting.json 요청

------------------------------------------------------------------------------------------------------------------------------------

eslint, prettier

npm i -D prettier eslint eslint-plugin-prettier eslint-plugin-react eslint-plugin-unused-imports


------------------------------------------------------------------------------------------------------------------------------------

husky
	eslint랑 prettier를 파일로 만들어 사용하고 있지만 모든 파일을 실시간으로 감시할 수는 없다.
	따라서 push및 commit하기 전에 lint:fix나 format 명령어를 자동 실행할 수 있는 친구

	- pre-commit 과 pre-push용으로 사용 ( 커밋/푸쉬 전 실행할 터미널 명령어를 자동으로 해주는 라이브러리)

npm i -D husky
.git이 없다면 git init 후 사용. 하지만 보통 CRA로 프로젝트 생성 시 자체 생성됨.
npx husky install

package.json 안 "scripts": 에 추가하면 됨
		"postinstall": "husky install",

이 후 pre-commit 명령과 pre-push 명령어 설정
npx husky add .husky/pre-commit "npm run format"
npx husky add .husky/pre-push "npm run lint:fix"

깃허브에 커밋 푸쉬하면 자동으로 위에 설정한 터미널 명령어 실행 ( 설정시 한번만 실행하면 파일에 설치됨 ) -> 클론 하면 다 설정되서 안해도됨
------------------------------------------------------------------------------------------------------------------------------------

