
전역 상태 관리

	react에서 가상 돔이 변화를 인지할 수 있게 해주는 값 = state

	>> props로 전달하는 값이 깊이가 깊어질수록(하위 컴포넌트가 많을수록) 오류 상황에서부터 에러를 추적하기가 어려워진다.

	ex)
	(props)-----------------------------------------------------(props)
	상위 컴포넌트 -> 하위 컴포넌트 -> 하위 -> 하위 -> ... -> 하위 컴포넌트


   *전역 관리
	모든 컴포넌트에서 사용해야하는 상태를 독립적으로 관리하여 어떤 곳에서도 store에서 불러서 사용할 수 있도록
	 																 => store에 저장해둔 파일들
																	 
========================================================================================================================

flux 패턴 (단방향)

	MVC 패턴(Model, View, Controller)
	Model -> 백엔드에서 DB와 연결되있는 부분
	Controller -> 백엔드에서 기능적인 부분
	View -> 모든 화면

	action -> dispatcher -> model(store) -> view
		- action은 변경할 데이터 객체, dispatcher를 통해서 store에 전달
		- dispatcher는 데이터 흐름을 관리(통로, 전달, 매개체)
		- store는 상태(state)의 저장소, state를 변경할 수 있는 함수 또한 가지고 잇음
		- view는 화면


* 즉, 전역 상태 관리가 필요하니 hook함수(useReducer, useContext)를 만들었고 이 함수들은 flux패턴 기반
	=> 이를 조금 더 편리하게 만들기 위해 redux같은 라이브러리가 만들어짐

========================================================================================================================

flux패턴 기반의 React Hooks함수
	useReducer
		상태를 변경 혹은 업데이트하는 로직을 컴포넌트에서 분리

	useContext
		전역 상태 관리를 위한 도구, 기능 자체는 redux와 동일
		보통은 업데이트 로직을 관리할 수 있는 reducer와 함께 사용
		oop를 활용한 프론트엔드 DI(의존성 주입)에 응용 가능

	---------------------------------------------------------------------------------

Hooks함수를 더 편리하게 쓰기 위한 라이브러리
	redux (라이브러리)
	redux-toolkit
	redux-saga

========================================================================================================================