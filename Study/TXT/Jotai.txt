Jotai는 recoil과 비슷하고, zustand는 redux와 비슷하다.
리덕스는 외부 store의 값을 참고하는 느낌이라면 리코일 조타이는 atom 값들이 모여 store를 만드는 느낌?
Jotai는 React의 useState, useContext를 합쳐놓은 느낌.

--------------------------------------------------------------------------------------------------------------------------

**사용법**

npm i jotai로 설치한다.

0. Provider
   provider로 전역 상태 관리를 하고 있어서 최상단 컴포넌트에 provider를 씌워줘야한다.
   scope는 더이상 사용되지 않고 store를 사용하면 해당 provider 하위에 있는 컴포넌트들 내에서만 atom값이 공유된다.
    
    import {Provider as JotaiProvider} from 'jotai';    // 이건 그냥 이름 지어준거

1. atom()
   atom(불변객체)은 atom config를 생성하는 함수이다. config라고 불리는 이유는 값을 가지고 있는 것이 아닌 그저 정의만 하기 때문.    
    
    import { atom } from 'jotai';

    export const dataAtom = atom('초기값');
    export const stringAtom = atom<string>("");

2. useAtom()
   해당 상태를 읽고 변경하기 위한 hook이다. useState와 동일하다.
   하지만 차이점은 특정 컴포넌트에 구속되지 않는다는 점이다.

    import { useAtom } from 'jotai';

    const [data, setData] = useAtom(dataAtom);
    const [getter, setter] = useAtom(만들어둔 atom);

    + 여기서 주의할 점 : useAtom(여기 안에 atom(..)이 오면 무한 루프에 빠짐. 따라서 같은 값을 넣더라도 변수에 담아서 넣자)

3. useAtomValue()
   값만 가지고 오는 hook이다. atom명을 넣으면 된다.

    import { useAtomValue } from 'jotai';

    const count = useAtomValue(dataAtom);

4. useSetAtom()
   값 변경할 때 사용하는 hook이다. 넣은 atom명의 값을 set할 수 있다.

    const set = useSetAtom(newsAtom);
    set(20);        // newsAtom이라는 atom의 값이 20으로 변경된다.

5. 3가지 패턴 (파생아톰)
    (1) 읽기 전용 atom
        선언:
            const readOnlyAtom = atom((get) => get(priceAtom) * 2);
        사용: 이렇게 사용하면 선언된 로직 수행 후 값만 얻을 수 있다.
            const ['이름넣는자리'] = useAtom(readOnlyAtom);

    (2) 쓰기 전용 atom
        선언: null값은 첫번째 argument를 넘기기 위한 컨벤션
            const writeOnlyAtom = atom(
                null,
                (get, set, update) => {
                    // `update` is any single value we receive for updating this atom
                    set(priceAtom, get(priceAtom) - update.discount)
                }
            )
        사용: [getter, setter]
            const [, test] = useAtom(writeOnlyAtom);
            test(update로 넘길 값)

    (3) 읽기-쓰기 전용 atom
        선언:
            const readWriteAtom = atom(
                (get) => get(priceAtom) * 2,
                (get, set, newPrice) => {
                    set(priceAtom, newPrice / 2)
                    // you can set as many atoms as you want at the same time
                }
            )
        사용: [getter, setter]
            const [count, setCount] = useAtom(readWriteAtom);
            setCount(10) => 하면 newPrice로 10이 넘어가면서 set함수 실행

6. 비동기

    const urlAtom = atom('<https://json.host.com>')
    const fetchUrlAtom = atom(async (get) => {
    const response = await fetch(get(urlAtom))
        return await response.json()
    })

--------------------------------------------------------------------------------------------------------------------------

궁금한 점?

- 왜 Context의 re-rendering 문제를 개선했다는 말이 많을까??
  Jotai도 최상단에서 provider로 전역관리하는데 useContext처럼 값을 사용하는 모든 컴포넌트가 
  리랜더링이 되지 않는건가?

  bottom to top 컴포넌트에서 
  provider 