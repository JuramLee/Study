https://velog.io/@devjooj/React-React-Query-%EC%82%AC%EC%9A%A9-%EC%9D%B4%EC%9C%A0-Queries-%EA%B0%9C%EB%85%90%ED%8E%B8
https://velog.io/@tkdals0978/React-Query-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0
https://velog.io/@jhjung3/React-Query%EC%9D%98-useQueries-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0-79d6b6k1
https://velog.io/@kimhyo_0218/React-Query-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%BF%BC%EB%A6%AC-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-useQuery

useInfiniteQuery()
https://velog.io/@familyman80/React-Query-%ED%95%9C%EA%B8%80-%EB%A9%94%EB%89%B4%EC%96%BC


웹 페이지를 보면 큼직한 레이아웃을 제외하고는 전부 백엔드로부터 받아오는 데이터를 화면에 표현하는 것일 거다.(물론 그렇지 않은 웹페이지들도 존재한다.) 그럼 데이터는 항상 백엔드에게 다시 요청해야할까? 

 

정답은 NO !

상태 관리 라이브러리(Redux, Recoil, Mobx 등)로 중복되는 데이터 요청에 한해서는 효율적으로 관리가 가능하다(전역 상태 관리로 props drilling도 피할 수 있다). 모두 훌륭한 라이브러리지만 백엔드 데이터들을 관리하기에는 적합하지 않은 점들이 있다. 그렇다면 상태관 리를 효율적이게 하면서 동시에 백엔드 데이터를 관리하기에도 용이한 라이브러리는 없을까?

React-query란?

React-query는 React Application에서 데이터 관리와 상태 관리 두마리 토끼를 다 잡게 해주는 JavaScript 라이브러리이다. 주로 데이터 fetching(API 호출), 데이터 캐싱, 동기화, 업데이트 등을 처리하기 위해 사용된다. React-query는 서버와의 상호작용을 추상화하고 데이터 관리를 효율적으로 처리할 수 있도록 도와준다.
 

단적인 예로 state와 useEffect로 요청하고 저장하던 코드를 단 한줄로 요약할 수 있다.

const Example = async () => {
  const [data, setData] = useState();
  
  useEffect(() => {
    // data 요청 로직
    const res = await fetching...;
    setData(res);
  }, []);
  
  return ( ... );
}
const Example = async () => {
  const { data } = useQuery(['querykey'], fetching, option);
  
  return ( ... );
}
요청에 대한 res 데이터 값만 담겨있는게 아니라 isLoading, isError, isSuccess, isFetching 등 요청에 대한 상태에 관한 정보도 함께 리턴한다.

대부분의 소프트 웨어가 가지고 있는 기본적인 데이터 처리 기능으로 Create(생성), Read(조회), Update(수정), Delete(삭제)의 앞글자를 딴 CRUD라고 하는 개념이 있다. React-query에서는 데이터를 조회(R)할 때는 useQuery(), 데이터에 대한 생성, 수정, 삭제(CUD)는 useMutation()을 사용한다.

💡  QueryClient()는 쿼리와 서버의 데이터 캐시를 관리하는 클라이언트이다. React-query가 필요한 최상단에 QueryClient를 선언해주고 QueryClientProvider로 감싸줘야 사용이 가능하다.
 

useQuery(['querykey'], fetching, option)

useQuery는 데이터 조회에 사용되는 훅이다.

1️⃣ 첫번째 인자로는 unique하게 관리되어야할 값인 queryKey가 온다. 간단한 문자열이어도 되고 배열에 담아와도 상관 없다. (문자열로 지정해도 알아서 배열의 0번째 index 값으로 이해한다) 여러개를 담아도 되고 배열에 대해서만 순서가 중요하다. 즉 키값으로 객체를 담았는데 그 객체 안에서의 데이터 순서는 상관없다는 의미이다.

2️⃣ 두번째 인자로는 함수가 들어간다. 이 함수는 data를 요청하는 fetching 함수가 주로 들어가며 Promise를 반환한다. (해당 Promise는 성공하면 res data를, 실패하면 error를 반환한다)

3️⃣ 세번째 인자로는 다양한 option들이 온다. 공식 문서에 많은 옵션들을 잘 설명해 뒀으니 옵션 전체는 공식 문서를 참고하고 많이 쓰이는 옵션만 간략하게 알아보자.

useQuery option
▶ onSuccess ((data) => {})
    : fetching 성공 시 실행되는 함수 (data는 성공시 res 값)
▶ onError ((error) => {})
    : fetching 실패 시 실행되는 함수 (error는 에러 값)
▶ onSettled ((data | error) => {})
    : fetching 성공해서 성공한 데이터가 전달되거나, 실패해서 에러가 전달될 때 실행되는 함수
▶ retry (boolean | number | (failureCount: number, error: TError) => boolean)
    : fetching 실패 시 재시도 하는 옵션. 기본적으로 실패시 3번 재시도 한다.
▶ staleTime (number | Infinity)
    : 캐싱 중인 데이터가 fresh 상태로 유지되는 시간. default staleTime은 0이다.
▶ cacheTime (number | Infinity)
    : 캐싱한 데이터가 남아있는 시간. default cacheTime은 5분이다. (해당 시간이 지나면 캐싱 데이터는 지워짐)
▶ refetchOnWindowFocus (boolean | 'always')
    : 데이터가 stale 상태일 때 윈도우 창이 선택될 때마다 refetch하는 옵션. default: true.
      (같은 창의 다른 탭 | 개발자 도구창에서 웹페이지도 해당)
 

여러가지의 요청을 한번에 캐싱할 수도 있는데 이때는 useQueries()를 사용한다. 쉽게 설명하자면 useQuery로 이루어진 배열로써 useQuery 훅을 통해 반환되는 쿼리 데이터가 배열로 반환된다. useQueries에 대해서는 다음 게시글을 참고하자.

const results = useQueries({
  queries: [
    { queryKey: ['post', 1], queryFn: fetchPost, staleTime: Infinity},
    { queryKey: ['post', 2], queryFn: fetchPost, staleTime: Infinity},
    ...
  ]
})
 

useMutation(() => {}, option)

useMutation은 데이터 변경에 사용되는 훅이다. 비동기 함수를 실행하여 데이터를 변경하고, 변경된 데이터를 서버에 반영한다. 등록할 땐 useMutation()이고 사용할 땐 mutate() 혹은 mutateAsync() 이다. mutate는 함수를 리턴하고 mutateAsync는 Promise를 리턴하며 async/await과 함께 사용 가능하다.

// 2가지 방법 모두 가능
const { mutate } = useMutation((params) => { fetching(params)... }, {
  onSuccess: () => {
    ...
  },
  options
});

return <button onClick={() => mutate(params)}>예시</button>;

-------------------------------------------------------------------------

const myFunction = useMutation((params) => { fetching(params)... }, {
  onSuccess: () => {
    ...
  },
  options
});

return <button onClick={() => myFunction.mutate(params)}>예시</button>;
useMutation() 또한 useQuery()와 동일하게 option을 사용할 수 있는데, 공식 문서에 많은 옵션들을 잘 설명해 뒀으니 옵션 전체는 공식 문서를 참고하고 많이 쓰이는 옵션만 간략하게 알아보자.

useMutation option
▶ onMutate: ((variables) => {})
    : mutation 함수가 실행되기 전에 실행된다. mutation 함수와 동일한 변수가 전달된다.
    : optimistic update(낙관적 업데이트는 아래에 설명 참고) 사용 시 유용한 함수이다.
▶ onSuccess: (() => {})
    : mutation 함수 성공 시 실행되는 함수
▶ onError: (() => {})
    : mutation 함수가 error를 만났을 때 실행되는 함수
▶ onSettled: (() => {})
    : mutation 함수 성공 혹은 실패시 실행되는 함수 (성공시 data가 실패시 error가 전달될 때 실행된다)
 

❗  다만, 두 곳에서 추가 콜백(onSuccess, onSettled, onError)을 실행할 경우  useMutation 의 추가 콜백 -> mutate 의 추가 콜백순으로 실행된다. 또한 컴포넌트가 언마운트되면 추가 콜백이 실행되지 않으니 참고하자.
staleTime과 cacheTime에 대하여

React-query는 서버에서 받아온 데이터를 캐싱하고 쉽고 효율적인 상태 관리를 위해 사용하는 라이브러리이다. 이를 조절하기 위해서 staleTime과 cacheTime을 조정할 것이다. 

 

위에서 설명했듯이 staleTime은 캐싱한 데이터가 fresh한 상태로 유지되는 시간이다. staleTime을 5분으로 설정했다고 가정해보자. 이 상황에서 꼭 반드시 5분이 지나야지만 데이터를 재호출(refetch)할 수 있을까?

 

정답은 NO !

데이터의 신선도를 위하여(백엔드와의 최신정보를 기반으로 한 동기화) 시간을 설정해 편리함을 가지는 것이지 반드시 지켜야하는 시간은 아니다. 즉 개발자가 원하는 시점에 재호출하도록 설정이 가능하다는 의미이다. 데이터 재호출에는 2가지 방법이 대표적이다.

 

1. refetch()

refetch()는 useQuery를 사용하여 데이터를 리패칭하는 라이브러리이다. 캐싱된 데이터는 무시하고 새롭게 데이터를 요청한다. 주로 사용자 action에 의한 데이터 갱신이 필요할 때 많이 사용한다.

 

2. invalidate()

invalidate()는 캐싱된 데이터를 무효화한 뒤 해당 요청을 만나게 되면 데이터를 다시 가져오는 형태로 사용하게 된다. refetch()와의 가장 큰 차이점은 refetch()는 캐시를 유지하고 이를 갱신하기 위해 사용하며, invalidate()는 캐싱 데이터를 무효화하고 데이터를 새로 받아오는 역할을 다음번에 쿼리를 실행하면 데이터를 재요청할 때 사용한다.

 

즉, invalidate()는 캐시를 무효화하여 새 데이터를 요청할 준비를 하는 것이고 refetch()는 실제로 쿼리를 재실행하여 데이터를 업데이트하는 역할인 것이다.

const queryClient = useQueryClient();
const { data, refeth } = useQuery(['queryKey'], fetching, option);

const onClickRefetchBtn = () => {
  refeth();
};

const onClickInvalidateBtn = () => {
  queryClient.invalidateQueries('queryKey')
}

return (
  <>
    // 'queryKey' 쿼리를 재요청하여 업데이트
    <button onClick={onClickRefetchBtn}>REFETCHING</button>
    // 'queryKey' 쿼리의 캐싱된 데이터를 무효화
    <button onClick={onClickInvalidateBtn}>INVALIDATING</button>
  </>
)
만약 데이터가 변경되자마자 바로 데이터를 갱신해야한다면 refetch()를 사용하는 것이 좋다. 하지만 새로운 데이터가 당장 필요한 것이 아니라면 invalidate()를 통해 데이터 캐싱을 비우고 필요할 때 재요청하는 것이 더 좋다.

Optimistic Update(낙관적 업데이트)

낙관적 업데이트란 백엔드 데이터와 사용 중인 데이터를 동기화하는 것을 신경쓰지 않고 사용자에게 먼저 데이터를 보여준 후 성공/실패에 따라 UI를 업데이트하는 것이다.

 

즉, 사용자는 백엔드와의 통신 성공 여부와 상관없이 UI를 확인할 수 있다. 대표적으로 인스타그램의 좋아요를 생각하면 된다. 아래는 공식 문서에 나와 있는 낙관적 업데이트 사용 예시이다. 핵심은 onMutate를 통해 mutation 함수가 실행되기 전에 상태 업데이트(화면에 반영)를 한 후 mutation 함수의 성공 여부를 반영한 상태를 보여준다는 것이다.

const queryClient = useQueryClient()
 
useMutation(updateTodo, {
  onMutate: async (newTodo) => {
    await queryClient.cancelQueries({ queryKey: ['todos'] })
 
    const previousTodos = queryClient.getQueryData(['todos'])
    queryClient.setQueryData(['todos'], (old) => [...old, newTodo])

    return { previousTodos }
  },

  onError: (err, newTodo, context) => {
    queryClient.setQueryData(['todos'], context.previousTodos)
  },

  onSettled: () => {
    queryClient.invalidateQueries({ queryKey: ['todos'] })
  },
})

https://juramemo.tistory.com/9