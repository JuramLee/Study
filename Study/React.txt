
* React virtual dom, react 랜더링 동작 원리
    랜더링이란? 
        props랑 state를 기반으로 UI를 어떻게 그릴지 컴포넌트에게 작업을 요청하는 리액트의 process이다
        https://narup.tistory.com/272

    랜더링 과정
        루트 DOM부터 시작하여 변화가 있어 업데이트가 필요한 컴포넌트들을 표시해두어 리랜더링하는 루프를 돈다

    Virtual DOM
        버츄얼돔이라는 단어는 리액트에서 공식적으로 인정하는 표현이 아니다.
        항상 DOM을 대표하지도 않고. 변화를 감지하기 위한 일종의 사본
        Virtual DOM은 Real DOM의 in-memory 표현이다. 
        DOM은 리액트가 렌더할 수 있는 렌더링 환경 중 하나일 뿐이다.

    재조정(reconciliation)이란?
        실제 DOM을 원하는 출력처럼 보이게 하기 위해 적용해야할 모든 변경사항을 수집하고 가상 DOM과 실제 DOM을 비교 및 계산하는 프로세스 
        즉 가상돔과 실제돔 사이의 랜더링되기까지의 전체 과정을 재조정이라고 한다.
        React가 변경해야 할 부분을 결정하기 위해 한 트리를 다른 트리와 비교하는 데 사용하는 알고리즘이다.
        리액트는 재조정(Reconciliation)과 렌더링을 별개의 단계가 되도록 설계됐다. 
        Reconciler은 트리의 어떤 부분이 변경됐는지 계산한다. 
        이후Renderer은 계산된 정보를 앱을 실제로 업데이트하는 데 사용한다.

    랜더 및 커밋 단계
        랜더 단계는 컴포넌트 랜더링하고 변경사항 계산(순수하고 부작용이 없습니다. React에 의해 일시 중지, 중단 또는 재시작 될 수 있습니다)
            ReactDOM.render()와 setState 메서드에 의해 시작됨, 실제 돔에 반영할 변경사항을 파악하는 단계
        커밋 단계는 랜더 단계에서 계산된 변경 사항을 DOM에 적용(DOM을 사용하여 부작용을 실행하고 업데이트를 예약 할 수 있습니다.)
            파악된 변경 사항을 실제 돔에 반영하는 단계
            
    랜더링 큐에 랜더링 등록
        첫 랜더링 이후 리랜더링을 큐에 등록하도록 지시하는 방법은 
            useState(), useReducer(), 
            this.setState(), this.forceUpdate()
            최상위 render(<APP>) 메소드를 다시 호출(루트 컴포넌트에서 forceUpdate를 호춣하는 것과 동일), 
            useSyncExternalStore()

    일반적인 랜더링 동작
        루트 혹은 상단 컴포넌트가 변경되어 리랜더링한다면 하위요소 전체가 다 리랜더링 된다
        props 값의 변화 여부는 고려하지 않고 무조건 리랜더링을 하는데 랜더링이 나쁜것이 아니라 실제로 DOM에 변경할지 말지를 아는 방법일 뿐

    랜더링 규칙
        랜더링이 순수해야하며 어떠한 사이드 이펙트도 없어야한다.(console.log도 사이드 이펙트)
            렌더 로직은 다음을 수행해선 안됩니다.

            기존 변수 및 객체를 변경할 수 없습니다.
            Math.random() 또는 Date.now()와 같은 임의의 값을 생성할 수 없습니다.
            네트워크 요청을 할 수 없습니다.
            상태 업데이트를 큐에 추가할 수 없습니다.
            렌더 로직은 다음을 수행할 수 있습니다.

            렌더링 도중 새로 생성된 객체 변경
            오류 발생
            캐시된 값과 같이 아직 생성되지 않은 데이터에 대한 "지연 초기화"

    컴포넌트 메타데이터와 파이버(Fibers)
        파이버
            파이버는 일종의 공략집이나 요약본 느낌
            리액트가 컴포넌트의 모든 훅을 해당 컴포넌트의 파이버 객체에 연결 리스트로 저장하기 떄문에 리액트 훅이 동작함
            리액트 v16에서 리액트의 핵심 알고리즘을 재구성한 새 재조정(reconciliation) 엔진이다.
            핵심 기능은 랜더링을 증분하는것 즉 랜더링 작업을 여러 덩어리로 나누어 여러 프레임에 분산하는 기능
            Fiber는 Reconciler를 재구현한다.
            Fiber는 컴포넌트 및 컴포넌트의 입력과 출력에 대한 정보를 포함한 자바스크립트 객체이다.
            https://velog.io/@jangws/React-Fiber






















    => 참고 링크
        원문
        https://blog.isquaredsoftware.com/2020/05/blogged-answers-a-mostly-complete-guide-to-react-rendering-behavior/#final-thoughts
        번역
        https://velog.io/@superlipbalm/blogged-answers-a-mostly-complete-guide-to-react-rendering-behavior
        생명주기 및 메소드
        https://ooeunz.tistory.com/138


=================================================================================================
추가로 궁금한 사항
동기와 비동기
useMemo와 useCallback
useEffect와 useLayoutEffect
useSyncExternalStore
큐와 스택
훅함수의 작동원리(동작원리)