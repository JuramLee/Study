
* React virtual dom, react 랜더링 동작 원리
    랜더링이란? 
        props랑 state를 기반으로 UI를 어떻게 그릴지 컴포넌트에게 작업을 요청하는 리액트의 process이다
        https://narup.tistory.com/272

    랜더링 과정
        루트 DOM부터 시작하여 변화가 있어 업데이트가 필요한 컴포넌트들을 표시해두어 리랜더링하는 루프를 돈다

    Virtual DOM
        버츄얼돔이라는 단어는 리액트에서 공식적으로 인정하는 표현이 아니다.
        항상 DOM을 대표하지도 않고. 변화를 감지하기 위한 일종의 사본
        Virtual DOM은 Real DOM의 in-memory 표현이다. 
        DOM은 리액트가 렌더할 수 있는 렌더링 환경 중 하나일 뿐이다.

    재조정(reconciliation)이란?
        실제 DOM을 원하는 출력처럼 보이게 하기 위해 적용해야할 모든 변경사항을 수집하고 가상 DOM과 실제 DOM을 비교 및 계산하는 프로세스 
        즉 가상돔과 실제돔 사이의 랜더링되기까지의 전체 과정을 재조정이라고 한다.
        React가 변경해야 할 부분을 결정하기 위해 한 트리를 다른 트리와 비교하는 데 사용하는 알고리즘이다.
        리액트는 재조정(Reconciliation)과 렌더링을 별개의 단계가 되도록 설계됐다. 
        Reconciler(조정자)은 트리의 어떤 부분이 변경됐는지 계산한다. 
        이후Renderer은 계산된 정보를 앱을 실제로 업데이트하는 데 사용한다.

    랜더 및 커밋 단계
        랜더 단계는 컴포넌트 랜더링하고 변경사항 계산(순수하고 부작용이 없습니다. React에 의해 일시 중지, 중단 또는 재시작 될 수 있습니다)
            ReactDOM.render()와 setState 메서드에 의해 시작됨, 실제 돔에 반영할 변경사항을 파악하는 단계
        커밋 단계는 랜더 단계에서 계산된 변경 사항을 DOM에 적용(DOM을 사용하여 부작용을 실행하고 업데이트를 예약 할 수 있습니다.)
            파악된 변경 사항을 실제 돔에 반영하는 단계
            
    랜더링 큐에 랜더링 등록
        첫 랜더링 이후 리랜더링을 큐에 등록하도록 지시하는 방법은 
            useState(), useReducer(), 
            this.setState(), this.forceUpdate()
            최상위 render(<APP>) 메소드를 다시 호출(루트 컴포넌트에서 forceUpdate를 호춣하는 것과 동일), 
            useSyncExternalStore()

    일반적인 랜더링 동작
        루트 혹은 상단 컴포넌트가 변경되어 리랜더링한다면 하위요소 전체가 다 리랜더링 된다
        props 값의 변화 여부는 고려하지 않고 무조건 리랜더링을 하는데 랜더링이 나쁜것이 아니라 실제로 DOM에 변경할지 말지를 아는 방법일 뿐

    랜더링 규칙
        랜더링이 순수해야하며 어떠한 사이드 이펙트도 없어야한다.(console.log도 사이드 이펙트)
            렌더 로직은 다음을 수행해선 안됩니다.

            기존 변수 및 객체를 변경할 수 없습니다.
            Math.random() 또는 Date.now()와 같은 임의의 값을 생성할 수 없습니다.
            네트워크 요청을 할 수 없습니다.
            상태 업데이트를 큐에 추가할 수 없습니다.
            렌더 로직은 다음을 수행할 수 있습니다.

            렌더링 도중 새로 생성된 객체 변경
            오류 발생
            캐시된 값과 같이 아직 생성되지 않은 데이터에 대한 "지연 초기화"

    컴포넌트 메타데이터와 파이버(Fibers)
        파이버
            파이버는 일종의 공략집이나 요약본 느낌
            리액트가 컴포넌트의 모든 훅을 해당 컴포넌트의 파이버 객체에 연결 리스트로 저장하기 떄문에 리액트 훅이 동작함
            리액트 v16에서 리액트의 핵심 알고리즘을 재구성한 새 재조정(reconciliation) 엔진이다.
            핵심 기능은 랜더링을 증분하는것 즉 랜더링 작업을 여러 덩어리로 나누어 여러 프레임에 분산하는 기능
            Fiber는 Reconciler를 재구현한다.
            Fiber는 컴포넌트 및 컴포넌트의 입력과 출력에 대한 정보를 포함한 자바스크립트 객체이다.
            https://velog.io/@jangws/React-Fiber

    key와 재조정
        리액트는 key를 컴포넌트 타입의 특정 인스턴스를 구별하는데 사용할 수 있는 고유 식별자로 사용합니다.
        배열의 key값으로 인덱스를 사용한다면 중간 2개가 삭제되고 3개가 추가되어도 하나가 늘어난것으로만 인식할 수 있다

    랜더링 일괄처리(Render Batching)와 타이밍
        렌더링 일괄 처리는 여러 setState() 호출 결과가 단일 렌더 패스의 렌더링 큐에 전달되어 실행되는 경우를 말하며 일반적으로 약간의 지연이 발생합니다.
        setState()는 state 객체에 대한 업데이트를 실행하고, state가 변경되면 컴포넌트가 리랜더링된다
        하지만 즉각적인 명령이 아닌 요청이라고 생각해야한다. 메소드 실행을 지연시키거나 한꺼번에 여러 컴포넌트를 갱신 할 수도 있다는 의미.
        변경사항을 모아서 한번에 일괄 처리(batch update)를 하고, 이 일괄 업데이트를 통해 컴포넌트의 렌더링 횟수를 최소화하는 것이다. (성능 향상 측면)
        -> 불필요한 렌더링 방지
        예외 케이스 : 이벤트 핸들러가 비동기 처리 방식(async/await, then/catch, setTimeout, fetch)으로 실행될 경우
        https://velog.io/@serenity/React%EC%97%90%EC%84%9C-state%EC%9D%98-batch-%EC%B2%98%EB%A6%AC

    비동기 랜더링, 클로저 그리고 상태 스냅샷
        setState()는 state 객체에 대한 업데이트를 실행하고, state가 변경되면 컴포넌트가 리랜더링된다
        하지만 즉각적인 명령이 아닌 요청이라고 생각해야한다. 
        클로저 함수란? 오직 함수가 정의되었을 때 존재했던 변수의 값만 알 수 있다. 즉 특정 시점의 스냅샷이다.
        변수에 대해 업데이트 된 값을 설정한 후 바로 사용하려는 접근은 항상 잘못된 방식이다.

    컴포넌트 렌더링 최적화 기법
        랜더링을 생략할 수 있는 3가지 API => 얕은 비교
            1. React.memo()
                사용자의 컴포넌트 타입을 인자로 전달받고 래핑된 새 컴포넌트를 반환. 
                래퍼 컴포넌트의 기본 동작은 props가 변경되었는지 확인하고 변경되지 않은 경우 리랜더링 되지 않도록 한다.
                props가 하나도 전달되지 않으면 props는 실제로 변경되지 않는다.

            2. React.Component.shouldComponentUpdate
                렌더링 프로세스 초기에 호출되는 선택적 클래스 컴포넌트 생명 주기 메서드
                false를 반환하면 리액트는 컴포넌트 렌더링을 건너뜁니다. 

            3. React.PureComponent
                이러한 props 및 상태 비교는 shouldComponentUpdate를 구현하는 가장 일반적인 방법이기 때문에 
                PureComponent 기반 클래스는 기본적으로 해당 동작을 구현하며 Component + shouldComponentUpdate 대신 사용할 수 있습니다.

            4. useMemo()
                요소를 감싸면 종속성이 변경될 때까지 동일하게 유지


    Props 참조가 렌더링 최적화에 미치는 영향
        리액트는  props가 변경되지 않은 경우에도 중첩된 모든 컴포넌트를 리랜더링한다.
        즉 하위 컴포넌트에 새로운 참조를 props로 전달하는것이 중요하지 않다는 것.
        function ParentComponent() {
            const onClick = () => {
                console.log('Button clicked');
            };

            const data = { a: 1, b: 2 };

            return <NormalChildComponent onClick={onClick} data={data} />;
        }
        <div>나 <button> 같은 호스트 컴포넌트를 React.memo()로 래핑해 랜더링 최적화하려는 것이 의미 없다.

    메모이제이션 메모아이제이션
        메모이제이션(memoization)은 컴퓨터 프로그램이 동일한 계산을 반복해야 할 때, 
        이전에 계산한 값을 메모리에 저장함으로써 동일한 계산의 반복 수행을 제거하여 프로그램 실행 속도를 빠르게 하는 기술이다.
        
        왜 모든 컴포넌트를 메모이제이션 하지 않을까?
            => 메모이제이션 하더라도 props를 비교하는 비용이 발생하며, 
            컴포넌트는 항상 새로운 props를 받기 때문에 메모이제이션 체크로는 리렌더링을 막을 수 없는 경우가 많다

    불변성(Immutability)과 리렌더링
        리액트의 상태 업데이트는 항상 불변하게 수행되어야 합니다. 그 이유는 크게 두가지가 있습니다.

        변경한 내용과 위치에 따라 렌더링할 것으로 예상한 컴포넌트가 렌더링되지 않을 수 있습니다.
        데이터가 실제로 업데이트된 시기와 원인에 대해 혼란을 일으킵니다.
        따라서 불변성을 꼭 지켜야 리랜더링을 확실하게 할 수 있다




















    => 참고 링크
        원문
        https://blog.isquaredsoftware.com/2020/05/blogged-answers-a-mostly-complete-guide-to-react-rendering-behavior/#final-thoughts
        번역
        https://velog.io/@superlipbalm/blogged-answers-a-mostly-complete-guide-to-react-rendering-behavior
        생명주기 및 메소드
        https://ooeunz.tistory.com/138


=================================================================================================
추가로 궁금한 사항
동기와 비동기
useMemo와 useCallback
useEffect와 useLayoutEffect
useSyncExternalStore
큐와 스택
훅함수의 작동원리(동작원리)
suspense
클로저
메모이제이션