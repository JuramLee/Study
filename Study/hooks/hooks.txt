**hooks를 최적화하여 사용하기** 
    1. state 최적화를 위한 방법
        1. Independent child, careless parent
        2. Minimal states, minimal render
        3. lifting the state
        4. 추상화를 통한 의존성 주입?
        5. pureComponent 함수형 버전을 사용해야 합니다. 바로 React.memo
        6. useCallback
            함수형 컴포넌트는 함수의 본문자체가 render 함수이기 때문에 이벤트 핸들러를 어디서 만들건간에 계속해서 새로운 함수를 만들게 됩니다. 
            React에서는 이 문제를 해결하기 위해서 또 다른 hook, useCallback을 제공합니다.
            이렇게하면 렌더 시마다 새로운 함수를 생성하지 않고 항상 같은 함수 인스턴스를 반환하게 됩니다. 
            결론적으로 render 가 실행될때마다 handleChangeEmail에 할당되는 “값”이 항상 같은 거죠
        
        https://react.dev/learn/thinking-in-react#step-3-find-the-minimal-but-complete-representation-of-ui-state
        https://velog.io/@shin6403/React-%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94%ED%95%98%EB%8A%94-7%EA%B0%80%EC%A7%80-%EB%B0%A9%EB%B2%95-Hooks-%EA%B8%B0%EC%A4%80
        https://react.dev/learn/sharing-state-between-components#lifting-state-up-by-example
        
    2. memoization 꼭 필요한가?
        성능 향상을 위한 Memoization
        Memoization의 정의는 아래와 같다.

        결과를 캐싱하고, 다음 작업에서 캐싱한 것을 재사용 하는 비싼 작업의 속도를 높이는 자바스크립트 기술
        이전 값을 메모리에 저장해 동일한 계산의 반복을 제거해 빠른 처리를 가능하게 하는 기술
        캐시에 초기 작업 결과를 저장하여 사용함으로 써 최적화 할 수 있다. 만약 작업을 다시 수행해야 한다면, 어딘가에 저장되어진 동일한 결과를 단순히 반환 해준다.
        useMemo, useCallback, React.memo는 모두 이 Memoization을 기반으로 작동한다. 그럼 이 Memoization이 어떻게 사용되는지 확인해보자.
        1. [https://velog.io/@lky5697/stop-using-usememo-now](https://javascript.plainenglish.io/stop-using-usememo-now-e5d07d2bbf70)
        2. [https://bum-developer.tistory.com/entry/React-useMemo를-사용하지-말아야-한다](https://bum-developer.tistory.com/entry/React-useMemo%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EB%A7%90%EC%95%84%EC%95%BC-%ED%95%9C%EB%8B%A4)
        https://velog.io/@shin6403/React.memo-useCallback-%EC%82%AC%EC%9A%A9%EC%9C%BC%EB%A1%9C-%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%B5%9C%EC%A0%81%ED%99%94-%ED%95%98%EA%B8%B0feat.React-NativeRedux
        

    3. custom hook과 context-api를 활용한 의존성 주입
        1. special-session 
        2. 단 예시는 특별 세션에서 다룬 예시가 아닌 본인의 프로젝트에서 찾아서 구현
    4. **각 개인은 a,b,c의 모범 사례를 작성하여 git-hub에 커밋하고,  레포지토리 주소를 첨부**


---------------------------------------------------------------------------------------------------------------------

들어가기에 앞서, React를 사용하다보면 state를 알게되고 useState를 사용하여 쉽게 화면을 동작할 수 있다는 점에 신났을 거다. 그러다보면 state가 곧 변수가 되고, state 남발로 필요 이상의 비용이 발생하고 있었다는 점을 뒤늦게 깨닫는다. 이 게시글이 눈에 들어오는 지금! 이 맘때가 딱 깨닫고 신경써서 개발하려는 시기일 것이다 :)
state란?
    리액트에서 이벤트에 의해 변경되는 동적인 값
    컴포넌트 내에서 지속적으로 변경이 일어나는 값을 관리하기 위해 사용한다.
    개발자가 의도한 동작에 의해 변할 수도 있고 사용자의 입력에 따라 새로운 값으로 변경될 수도 있다.
    State 값이 변경되고 재 렌더링이 필요한 경우에 React가 자동으로 계산하여 변경된 부분을 렌더링 한다.
    State의 값을 변경하기 위해서는 반드시 setState 함수를 이용한다,
    state 값을 임의로 변경해선 안 된다.
    State 값을 직접 변경하게 되면 React가 Component를 다시 렌더링 할 타이밍을 알아차리지 못한다.

    https://lakelouise.tistory.com/260?category=1023088

React Hooks
    React Hooks은 리액트의 새로운 기능으로 React 16.8버전에 새로 추가된 기능으로 state, component에 대한 것들을 바꿔놓았다.
    예를 들면 function component에서 state을 가질 수 있게 된 것
    만일 앱을 react hook을 사용하여 만든다면 class component, render 등을 안해도 된다는 뜻이다.
    모든 것은 하나의 function이 되는 것 함수형 프로그래밍이 가능해지는 것

    // 클래스형일때
    import React, { Component } from 'react';

    class App extends Component {
    state = {
        count: 0,
    };

    countUpdate(n) {
        this.setState({
        count: n,
        });
    }
    render() {
        const { count } = this.state;
        return (
        <div>
            <div>
            <h1>{count}</h1>
            <button
                onClick={() => {
                this.countUpdate(count + 1);
                }}
            >
                증가
            </button>
            </div>
        </div>
        );
    }
    }

    export default App;

    // 함수형일 때
    import React, { Component, useState } from 'react';

    const App = () => {
    const [count, setCount] = useState(0);

    return (
        <>
        {count}
        <button onClick={() => setCount(count + 1)}>증가</button>
        </>
    );
    };

    export default App;

    클래스형일 때  render props이나 고차 컴포넌트와 같은 패턴을 통해 이러한 문제를 해결하는 방법에 익숙할 것입니다. 
    그러나 이런 패턴의 사용은 컴포넌트의 재구성을 강요하며, 코드의 추적을 어렵게 만듭니다. 

    Hook을 사용하면 컴포넌트로부터 상태 관련 로직을 추상화할 수 있습니다. 이를 이용해 독립적인 테스트와 재사용이 가능합니다. 
    Hook은 계층의 변화 없이 상태 관련 로직을 재사용할 수 있도록 도와줍니다. 
    이것은 많은 컴포넌트 혹은 커뮤니티 사이에서 Hook을 공유하기 쉽게 만들어줍니다.

    Hook은 함수 컴포넌트에서 React state와 생명주기 기능(lifecycle features)을 “연동(hook into)“할 수 있게 해주는 함수입니다. 
    Hook은 class 안에서는 동작하지 않습니다. 대신 class 없이 React를 사용할 수 있게 해주는 것입니다

    hook 사용 규칙
    최상위(at the top level)에서만 Hook을 호출해야 합니다. 반복문, 조건문, 중첩된 함수 내에서 Hook을 실행하지 마세요.
    React 함수 컴포넌트 내에서만 Hook을 호출해야 합니다. 일반 JavaScript 함수에서는 Hook을 호출해서는 안 됩니다.

PureComponent
    PureComponent와 일반 컴포넌트의 차이점은 간단합니다. 
    Component는 항상 render를 다시 실행하지만 PureComponent는 Props나 State를 얕은 비교해서 변경점이 없으면 render를 다시 실행하지 않아요.

    React 공식문서에서는 heavy한 작업에 useMemo를 쓰라고 권장하고 있지만 실제로 프론트엔드에서 헤비한 작업을 하게 될 일보다는 
    이렇게 PureComponent의 불필요한 re-render를 막기 위해서 사용하는 케이스가 더욱 흔할 것 같아요.

    https://hyunseob.github.io/2019/06/02/react-component-the-right-way/

인라인 함수
    인라인 함수를 render 메소드 내에서 쓰면 매 render 실행시마다 함수 인스턴스가 새로 생성되겠죠? 따라서 이 코드를 실행되면 결과는 false로 출력됩니다.

    (() => null) === (() => null); // false
    이 말은 매 render 실행마다 Input에 Props로 내려오는 함수가 모두 다르다는 것이고, 함수의 실행과는 관계 없이
    Shallow compare로 함수 자체가 다른지를 비교하기 때문에 항상 다르다는 결과를 반환하겠죠. 결론적으로 항상 re-render 되는 것입니다.
    https://ko.legacy.reactjs.org/docs/hooks-intro.html
    https://studyingych.tistory.com/59#:~:text=React%20Hooks%EC%9D%80%20%EB%A6%AC%EC%95%A1%ED%8A%B8,%EC%97%90%20%EB%8C%80%ED%95%9C%20%EA%B2%83%EB%93%A4%EC%9D%84%20%EB%B0%94%EA%BF%94%EB%86%93%EC%95%98%EB%8B%A4.&text=%EB%A7%8C%EC%9D%BC%20%EC%95%B1%EC%9D%84%20react%20hook,%EC%9D%84%20%EC%95%88%ED%95%B4%EB%8F%84%20%EB%90%9C%EB%8B%A4%EB%8A%94%20%EB%9C%BB%EC%9D%B4%EB%8B%A4.

---------------------------------------------------------------------------------------------------------------------

memoization은 순수함수의 입력(인자)이 같으면 리턴하는 값도 항상 같다는 점을 이용해 한번 계산한 반환 값을 저장해두고 다음 입력이 들어올 때 저장된 값을 반환합니다. React의 React.memo는 “순수” 컴포넌트(PureComponent)에 들어갈 입력, 즉, Props, State가 같은 경우 같은 렌더링 결과가 나온다는 점을 렌더링에 이용하는 거죠. 
다만 React.memo의 경우엔 어디다 결과를 저장해두고 반환한다기 보다는 Props와 State가 같으면 굳이 렌더링을 하지 않는 형태로 구현하는 겁니다.
https://velog.io/@shin6403/React.memo-useCallback-%EC%82%AC%EC%9A%A9%EC%9C%BC%EB%A1%9C-%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%B5%9C%EC%A0%81%ED%99%94-%ED%95%98%EA%B8%B0feat.React-NativeRedux

https://juramemo.tistory.com/7
https://juramemo.tistory.com/8