lazy loading, code splitting. suspense, automatic batching

lazy loading
    공부하기 전에는 skeleton UI를 위한 suspense의 또다른 방법이 아닐까? 생각함
    lazy lets you defer loading component’s code until it is rendered for the first time.
    lazy loading이란?  (지연로딩)
    페이지를 불러오는 시점에 당장 필요하지 않은 리소스들을 추후에 로딩하게 하는 기술
    즉 필요로 하는 시점에 로딩하는 것을 의미한다.
    예시 : placeholder, 무한 스크롤

    장점 : 
    사용자가 처음 웹사이트에 접근할 때 리소스의 일부만 다운로드되기 때문에 컨텐츠의 제공 속도가 빠르다. 
    성능이 향상된다.
    컨텐츠가 지속적으로 공급되기 떄문에 사용자가 웹사이트 이탈 확률이 낮아진다.
    사용자가 필요로 하는 경우에만 컨텐츠를 불러오기 때문에 배터리 시간 시스템 부담등이 낮아진다. 즉 비용 감소

    React.lazy란?
    리액트에서 컴포넌트 파일을 코드의 최상단에 import로 정의하고 동적으로 불러오기를 사용하면 에러가 발생한다.
    동적으로 불러오기 위해서는 React.lazy()를 사용해야한다. 
    React.lazy()는 import() 구문을 반환하는 콜백함수를 인자로 받는다.
    const About = React.lazy(() => import('./About'));
    동적으로 불러오는 컴포넌트 파일에는 반드시 지켜야하는 2가지 규칙이 있다.
    1. React 컴포넌트를 포함해야한다
    2. default export를 가진 컴포넌트여야 한다.

    React.lazy()는 손쉽게 개별 자바스크립트 청크로 분리하는 기본 제공 방법을 제공한다.

    React 공식 문서에 따르면 router 바로 아래 suspense를 위치시키고, route로 보여줄 컴포넌트들을 React.lazy()로 
    불러오는 것을 권장한다.

    다른 컴포넌트 혹은 함수 안에 lazy를 선언하지 말고 항상 최상위 수준에서 선언해라


lazy 컴포넌트는 suspense 컴포넌트 하위에서 랜더링되어야한다. 따라서 suspense 컴포넌트로 lazy 컴포넌트를 감쌌고
suspense 의 fallback prop으로 컴포넌트가 로드될 때까지 보여줄 걸 지정하면 된다.
React.lazy를 사용하여 클라이언트에서 코드 분할을 위해 Suspense를 사용할 수도 있습니다
    
    https://react.dev/reference/react/lazy#lazy
    https://web.dev/reduce-javascript-payloads-with-code-splitting/
    https://web.dev/i18n/ko/code-splitting-suspense/
    https://itprogramming119.tistory.com/entry/React-Reactlazy%EB%9E%80
    https://velog.io/@vagabondms/%EA%B8%B0%EC%88%A0-%EC%8A%A4%ED%84%B0%EB%94%94-Lazy-loading%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80

--------------------------------------------------------------------------------------

code splitting
    코드 스플릿팅이라고 하는 것은 webpack, rollup, browserify와 같은 모듈 번들러를 이용하여 만들어진 하나의 번들 파일을 여러 개의 번들 파일로 나누는 것을 의미합니다.
    그리고 하나의 번들 파일을 여러 개의 번들 파일로 나누는 이유는 더 빠른 속도로 화면을 로드하기 위해서입니다.

    공식 문서에서 최적의 장소를 route로 지칭하고 잇다.

    App 에 code splitting 을 도입하는 방식중 하나는 동적 import() 를 사용하는 것이다.
    동적 import()하는 방법 중 하나가 React.lazy()

    https://jforj.tistory.com/162
    https://hwani.dev/react-code-splitting/

suspense
    여러 구성 요소가 모두 지연 로드 된 경우에도 로드에서 여러 구성요소를 일시 중단할 수 있다.
    단일 로드 상태만 표시하면서 여러 구성 요소의 랜더링을 지연시키는 매우 유용한 방법

    만약 실패할 경우 error boundary 혹은 static getDerivedStateFromError() 혹은 componentDidCatch(). 

    https://legacy.reactjs.org/docs/error-boundaries.html
    https://react.dev/blog/2022/03/29/react-v18#suspense-in-data-frameworks



------------------------------------------------------------------------------------

Automatic batching batch(일괄)
    batching이란 state 값이 변경되었을 때 해당 컴포넌트를 리랜더링하는데 이 업데이 트작업을 일괄적으로 처리하는 것
    불필요한 리랜더링 방지
    state update 작업을 Queue에 몰아넣고 일정 주기마다 Queue에 등록된 작업을 
    순차적으로 일괄 시행하면서 불필요한 리렌더링을 방지한다.

그렇다면 일괄처리는 리액트 18에 새로 등장한 기능일까? 정답은 아니다.

 

리액트 17 및 이전 버전에서 리액트는 onClick 콜백과 같은 리액트 이벤트 핸들러에서만 일괄 처리를 수행했다.  setTimeout, await 이후 또는 일반 JS 이벤트 핸들러와 같은 리액트 이벤트 핸들러 외에서의 업데이트는 큐에 추가되지 않았으며 각각 별도의 리랜더링이 발생했었다.

 

그러나 리액트 18에서는 이제 단일 이벤트 루프 틱에 대기 중인 모든 업데이트의 "자동 일괄 처리"를 수행한다. 따라서 필요한 전체 랜더링 수를 줄일 수 있다.

 

예를 들어

const [counter, setCounter] = useState(0);

const onClick = async () => {
  setCounter(0);  // 패스1
  setCounter(1);  // 패스2

  const data = await fetchSomeData();

  setCounter(2);  // 패스3
  setCounter(3);  // 패스4
};
리액트 17 혹은 이전 버전을 사용하면 위의 코드에서 패스1과 패스2를 일괄처리하고, await 이후 패스3과 패스4를 각각 처리해서 총 3번의 랜더 패스를 실행한다. 하지만 리액트 18을 사용하면 패스1과 패스2가 일괄처리되고 await 이후 패스3과 패스4를 일괄처리되어 총 2번의 랜더 패스를 실행하게 된 것이다.

 

리액트 18부터 createRoot( )를 통해 모든 업데이트들이 어디서 왔는가와는 무관하게 자동으로 배칭된다.

만약 batching을 원하지 않는 경우(예를 들어 state 변경 후 즉시 DOM으로부터 값을 가져오는 것)에는 ReactDOM.flushSync( )를 사용하여 배칭하지 않을 수 있다.

import { flushSync } from 'react-dom'; // Note: react-dom, not react

function handleClick() {
  flushSync(() => {
    setCounter(c => c + 1);
  });
  // React has updated the DOM by now
  flushSync(() => {
    setFlag(f => !f);
  });
  // React has updated the DOM by now
}